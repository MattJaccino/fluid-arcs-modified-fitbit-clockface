"use strict"

function e(e) {
    return e && typeof e === "object" && "default" in e ? e["default"] : e
}
var t = e(require("document"))
var a = e(require("clock"))
var r = e(require("user-activity"))
var n = require("user-settings")
var o = require("power")
var c = require("appbit")
var i = require("heart-rate")
var u = require("display")

function s(e) {
    if (e < 10) {
        e = "0" + e
    }
    return e
}

function v(e) {
    var a = t.getElementById(e)
    if(e==="heartRate"){
      return {
        dataType: e,
        dataContainer: a,
        arcBack: a.getElementById("arcBack"),
        arcFront: a.getElementById("arcFront"),
        dataCount: a.getElementById("dataCount"),
        dataIcon: a.getElementById("dataIcon")
      }
      
    }
    return {
        dataType: e,
        dataContainer: a,
        dataCount: a.getElementById("dataCount"),
        dataIcon: a.getElementById("dataIcon")
    }
}

var l, d

function g() {
    if (c.me.permissions.granted("access_heart_rate")) {
        l = new i.HeartRateSensor
        y()
        p()
    } else {
        console.log("Heart Rate Permission was denied.")
        heartData.dataCount.text = "N/A"
    }
}

function f() {
    var e = l.heartRate / 180 * 360
    if (e > 360) {
        e = 360
    }
    var t = v("heartRate")
    t.arcFront.sweepAngle = e
    t.dataCount.text = l.heartRate
}

function y() {
    u.display.addEventListener("change", function() {
        if (u.display.on) {
            p()
        } else {
            m()
        }
    })
}

function p() {
    if (!d) {
        l.start()
        f()
        d = setInterval(f, 1e3)
    }
}

function m() {
    l.stop()
    clearInterval(d)
    d = null
}
var h = t.getElementById("clockTime")
var B = t.getElementById("clockSeconds")
var E = t.getElementById("date")

var k = t.getElementById("batteryLevel")
a.granularity = "seconds"
var q = ""
var x = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]

var C = ["calories", "steps"]

var F = []
for (var M = 0; M < C.length; M++) {
    var b = C[M]
    F.push(v(b))
}

function w(e) {  
  var t = e.dataType
  var n = r.goals[t]
  var a = r.today.adjusted[t] || 0
  e.dataCount.text = a
    if(e==="heartRate"){
      e.arcFront.sweepAngle = o
      var o = a / n * 360
      if (o > 360) {
          o = 360
      }

    }
}

function A() {
    for (var e = 0; e < C.length; e++) {
        w(F[e])
    }
}

function battery_color(battery){
  let icon = t.getElementById("battIcon");
  icon.width = 56
  if(battery == 100) icon.width = 65;
  if(battery < 10) icon.width = 47;
  if(battery>70){
    icon.style.fill = "fb-green"
    return "fb-green"
  }
  else if(battery>35){
    icon.style.fill = "fb-yellow"
    return "fb-yellow"
  }
  icon.style.fill = "fb-red"
  return "fb-red"
}



/* Analog */
let hourHand = t.getElementById("hours");
let minHand = t.getElementById("mins");
let secHand = t.getElementById("secs");

// Returns an angle (0-360) for the current hour in the day, including minutes
function hoursToAngle(hours, minutes) {
  let hourAngle = (360 / 12) * hours;
  let minAngle = (360 / 12 / 60) * minutes;
  return hourAngle + minAngle;
}

// Returns an angle (0-360) for minutes
function minutesToAngle(minutes) {
  return (360 / 60) * minutes;
}

// Returns an angle (0-360) for seconds
function secondsToAngle(seconds) {
  return (360 / 60) * seconds;
}

// Rotate the hands every tick
function updateClock() {
  let today = new Date();
  let hours = today.getHours() % 12;
  let mins = today.getMinutes();
  let secs = today.getSeconds();

  hourHand.groupTransform.rotate.angle = hoursToAngle(hours, mins);
  minHand.groupTransform.rotate.angle = minutesToAngle(mins);
  secHand.groupTransform.rotate.angle = secondsToAngle(secs);
}
/**********************/

let face = {
  switched: false
}

var days = ["Sun", "Mon", "Tue", "Wed", "Thur", "Fri", "Sat"]

a.ontick = function(e) {
    if(!face.switched){
      var t = e.date
      var a = t.getHours()
      if (n.preferences.clockDisplay === "12h") {
          a = a % 12 || 12
      }
      var r = s(t.getMinutes())
      var c = s(t.getSeconds())

      h.text = a+":"+r
      B.text = c

      var u = t.getMonth()
      var v = x[u]
      var l = t.getDate()
      
      var day = days[t.getDay()]

      E.text = day + "   " + v + " " + l
    }
    else{
      updateClock();
    }
    let level = o.battery.chargeLevel;
    k.text = level + "%"
    k.style.fill = battery_color(level)
    A()
}




// ------------ When user wants analog face ----------
function switch_helper(old, neww){
  for(i=0;i<old.length;i++){
    old[i].style.opacity = 0
  }
  for(i=0;i<neww.length;i++){
    neww[i].style.opacity = 1
  }
}

function fade(){
  let heart = t.getElementById("heartRate");
  let steps = t.getElementById("steps");
  let cals = t.getElementById("calories");
  let list = [heart, steps, cals];
  for(let i=0; i<list.length; i++){
    if(!face.switched){
      list[i].style.opacity = 0.5;          
    }
    else{
      list[i].style.opacity = 1;
    }
  }
}

function switch_face(){
  let dot = t.getElementById("dot")
  let clockface = t.getElementById("clockface")
  let hourHand = t.getElementById("hours");
  let minHand = t.getElementById("mins");
  let secHand = t.getElementById("secs");
  var analogs = [hourHand, minHand, secHand, clockface, dot]
  let clockTime = t.getElementById("clockTime")
  let clockSecs = t.getElementById("clockSeconds")
  let clockDate = t.getElementById("date")
  var digitals = [clockTime, clockSecs, clockDate]
  
  // If currently using digital face
  if(!face.switched){
    switch_helper(digitals, analogs)
    fade()
    face.switched = true
  }
  else{
    switch_helper(analogs, digitals)
    fade()
    face.switched = false
  }
}


// -------------------------------------------

g()

let button = t.getElementById("button")
button.onclick = function(evt){
  switch_face();
}
